{"ast":null,"code":"import { saveUserData, getToken, clearUserData } from '../utils/storage';\n\n// 封裝API請求方法\nconst apiRequest = async (url, method = 'GET', data = null) => {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n\n  // 如果有登入令牌，加入Authorization頭\n  const token = getToken();\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  const config = {\n    method,\n    headers,\n    credentials: 'include' // 包含cookie\n  };\n  if (data) {\n    config.body = JSON.stringify(data);\n  }\n  const response = await fetch(url, config);\n\n  // 檢查回應狀態\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({\n      message: `HTTP error! status: ${response.status}`\n    }));\n    throw new Error(errorData.message || 'API請求失敗');\n  }\n  return response.json();\n};\n\n// 用戶登入\nexport const login = async credentials => {\n  try {\n    const response = await apiRequest('/api/auth/login', 'POST', credentials);\n    const {\n      user,\n      token\n    } = response;\n    if (user && token) {\n      saveUserData(user, token);\n      return user;\n    }\n    throw new Error('登入回應缺少必要資訊');\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n// 用戶註冊\nexport const register = async userData => {\n  try {\n    const response = await apiRequest('/api/auth/register', 'POST', userData);\n    const {\n      user,\n      token\n    } = response;\n    if (user && token) {\n      saveUserData(user, token);\n      return user;\n    }\n    throw new Error('註冊回應缺少必要資訊');\n  } catch (error) {\n    console.error('Register error:', error);\n    throw error;\n  }\n};\n\n// 用戶登出\nexport const logout = async () => {\n  try {\n    await apiRequest('/api/auth/logout', 'POST');\n    clearUserData();\n  } catch (error) {\n    console.error('Logout error:', error);\n    // 即使API失敗，也清除本地存儲\n    clearUserData();\n    throw error;\n  }\n};","map":{"version":3,"names":["saveUserData","getToken","clearUserData","apiRequest","url","method","data","headers","token","config","credentials","body","JSON","stringify","response","fetch","ok","errorData","json","catch","message","status","Error","login","user","error","console","register","userData","logout"],"sources":["/Users/lidiannan/Documents/GitHub/comment-system/frontend/src/services/auth.js"],"sourcesContent":["import { saveUserData, getToken, clearUserData } from '../utils/storage'\n\n// 封裝API請求方法\nconst apiRequest = async (url, method = 'GET', data = null) => {\n  const headers = {\n    'Content-Type': 'application/json'\n  }\n\n  // 如果有登入令牌，加入Authorization頭\n  const token = getToken()\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`\n  }\n\n  const config = {\n    method,\n    headers,\n    credentials: 'include' // 包含cookie\n  }\n\n  if (data) {\n    config.body = JSON.stringify(data)\n  }\n\n  const response = await fetch(url, config)\n  \n  // 檢查回應狀態\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({\n      message: `HTTP error! status: ${response.status}`\n    }))\n    throw new Error(errorData.message || 'API請求失敗')\n  }\n\n  return response.json()\n}\n\n// 用戶登入\nexport const login = async (credentials) => {\n  try {\n    const response = await apiRequest('/api/auth/login', 'POST', credentials)\n    const { user, token } = response\n    \n    if (user && token) {\n      saveUserData(user, token)\n      return user\n    }\n    \n    throw new Error('登入回應缺少必要資訊')\n  } catch (error) {\n    console.error('Login error:', error)\n    throw error\n  }\n}\n\n// 用戶註冊\nexport const register = async (userData) => {\n  try {\n    const response = await apiRequest('/api/auth/register', 'POST', userData)\n    const { user, token } = response\n    \n    if (user && token) {\n      saveUserData(user, token)\n      return user\n    }\n    \n    throw new Error('註冊回應缺少必要資訊')\n  } catch (error) {\n    console.error('Register error:', error)\n    throw error\n  }\n}\n\n// 用戶登出\nexport const logout = async () => {\n  try {\n    await apiRequest('/api/auth/logout', 'POST')\n    clearUserData()\n  } catch (error) {\n    console.error('Logout error:', error)\n    // 即使API失敗，也清除本地存儲\n    clearUserData()\n    throw error\n  }\n}"],"mappings":"AAAA,SAASA,YAAY,EAAEC,QAAQ,EAAEC,aAAa,QAAQ,kBAAkB;;AAExE;AACA,MAAMC,UAAU,GAAG,MAAAA,CAAOC,GAAG,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,KAAK;EAC7D,MAAMC,OAAO,GAAG;IACd,cAAc,EAAE;EAClB,CAAC;;EAED;EACA,MAAMC,KAAK,GAAGP,QAAQ,CAAC,CAAC;EACxB,IAAIO,KAAK,EAAE;IACTD,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUC,KAAK,EAAE;EAC9C;EAEA,MAAMC,MAAM,GAAG;IACbJ,MAAM;IACNE,OAAO;IACPG,WAAW,EAAE,SAAS,CAAC;EACzB,CAAC;EAED,IAAIJ,IAAI,EAAE;IACRG,MAAM,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC;EACpC;EAEA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACX,GAAG,EAAEK,MAAM,CAAC;;EAEzC;EACA,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;MACnDC,OAAO,EAAE,uBAAuBN,QAAQ,CAACO,MAAM;IACjD,CAAC,CAAC,CAAC;IACH,MAAM,IAAIC,KAAK,CAACL,SAAS,CAACG,OAAO,IAAI,SAAS,CAAC;EACjD;EAEA,OAAON,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMK,KAAK,GAAG,MAAOb,WAAW,IAAK;EAC1C,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMX,UAAU,CAAC,iBAAiB,EAAE,MAAM,EAAEO,WAAW,CAAC;IACzE,MAAM;MAAEc,IAAI;MAAEhB;IAAM,CAAC,GAAGM,QAAQ;IAEhC,IAAIU,IAAI,IAAIhB,KAAK,EAAE;MACjBR,YAAY,CAACwB,IAAI,EAAEhB,KAAK,CAAC;MACzB,OAAOgB,IAAI;IACb;IAEA,MAAM,IAAIF,KAAK,CAAC,YAAY,CAAC;EAC/B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EAC1C,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMX,UAAU,CAAC,oBAAoB,EAAE,MAAM,EAAEyB,QAAQ,CAAC;IACzE,MAAM;MAAEJ,IAAI;MAAEhB;IAAM,CAAC,GAAGM,QAAQ;IAEhC,IAAIU,IAAI,IAAIhB,KAAK,EAAE;MACjBR,YAAY,CAACwB,IAAI,EAAEhB,KAAK,CAAC;MACzB,OAAOgB,IAAI;IACb;IAEA,MAAM,IAAIF,KAAK,CAAC,YAAY,CAAC;EAC/B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACF,MAAM1B,UAAU,CAAC,kBAAkB,EAAE,MAAM,CAAC;IAC5CD,aAAa,CAAC,CAAC;EACjB,CAAC,CAAC,OAAOuB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC;IACAvB,aAAa,CAAC,CAAC;IACf,MAAMuB,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}