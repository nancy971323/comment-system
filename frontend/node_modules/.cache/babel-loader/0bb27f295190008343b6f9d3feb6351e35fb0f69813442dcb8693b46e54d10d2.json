{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app-container\"\n};\nconst _hoisted_2 = {\n  class: \"content\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"auth-container\"\n};\nconst _hoisted_4 = {\n  class: \"auth-toggle\"\n};\nconst _hoisted_5 = {\n  key: 2,\n  class: \"comments-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NavBar = _resolveComponent(\"NavBar\");\n  const _component_Alert = _resolveComponent(\"Alert\");\n  const _component_LoginForm = _resolveComponent(\"LoginForm\");\n  const _component_RegisterForm = _resolveComponent(\"RegisterForm\");\n  const _component_CommentForm = _resolveComponent(\"CommentForm\");\n  const _component_CommentList = _resolveComponent(\"CommentList\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_NavBar, {\n    isLoggedIn: $options.isLoggedIn,\n    username: $data.currentUser ? $data.currentUser.username : '',\n    onLogout: $options.handleLogout\n  }, null, 8 /* PROPS */, [\"isLoggedIn\", \"username\", \"onLogout\"]), _createElementVNode(\"div\", _hoisted_2, [$data.alert.show ? (_openBlock(), _createBlock(_component_Alert, {\n    key: 0,\n    message: $data.alert.message,\n    type: $data.alert.type,\n    onClose: $options.clearAlert\n  }, null, 8 /* PROPS */, [\"message\", \"type\", \"onClose\"])) : _createCommentVNode(\"v-if\", true), !$options.isLoggedIn ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    class: _normalizeClass({\n      active: $data.showLogin\n    }),\n    onClick: _cache[0] || (_cache[0] = $event => $data.showLogin = true)\n  }, \"登入\", 2 /* CLASS */), _createElementVNode(\"button\", {\n    class: _normalizeClass({\n      active: !$data.showLogin\n    }),\n    onClick: _cache[1] || (_cache[1] = $event => $data.showLogin = false)\n  }, \"註冊\", 2 /* CLASS */)]), $data.showLogin ? (_openBlock(), _createBlock(_component_LoginForm, {\n    key: 0,\n    onLogin: $options.handleLogin,\n    onLoginError: $options.showAlert\n  }, null, 8 /* PROPS */, [\"onLogin\", \"onLoginError\"])) : (_openBlock(), _createBlock(_component_RegisterForm, {\n    key: 1,\n    onRegister: $options.handleRegister,\n    onRegisterError: $options.showAlert\n  }, null, 8 /* PROPS */, [\"onRegister\", \"onRegisterError\"]))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createVNode(_component_CommentForm, {\n    onCommentAdded: $options.loadComments\n  }, null, 8 /* PROPS */, [\"onCommentAdded\"]), _createVNode(_component_CommentList, {\n    comments: $data.comments,\n    currentUserId: $data.currentUser.id,\n    onCommentAction: $options.handleCommentAction\n  }, null, 8 /* PROPS */, [\"comments\", \"currentUserId\", \"onCommentAction\"])]))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createVNode","_component_NavBar","isLoggedIn","$options","username","$data","currentUser","onLogout","handleLogout","_createElementVNode","_hoisted_2","alert","show","_createBlock","_component_Alert","message","type","onClose","clearAlert","_createCommentVNode","_hoisted_3","_hoisted_4","_normalizeClass","active","showLogin","onClick","_cache","$event","_component_LoginForm","onLogin","handleLogin","onLoginError","showAlert","_component_RegisterForm","onRegister","handleRegister","onRegisterError","_hoisted_5","_component_CommentForm","onCommentAdded","loadComments","_component_CommentList","comments","currentUserId","id","onCommentAction","handleCommentAction"],"sources":["/Users/lidiannan/Documents/GitHub/comment-system/frontend/src/App.vue"],"sourcesContent":["<template>\n    <div class=\"app-container\">\n      <NavBar \n        :isLoggedIn=\"isLoggedIn\" \n        :username=\"currentUser ? currentUser.username : ''\" \n        @logout=\"handleLogout\" \n      />\n      \n      <div class=\"content\">\n        <Alert \n          v-if=\"alert.show\" \n          :message=\"alert.message\" \n          :type=\"alert.type\" \n          @close=\"clearAlert\" \n        />\n        \n        <div v-if=\"!isLoggedIn\" class=\"auth-container\">\n          <div class=\"auth-toggle\">\n            <button \n              :class=\"{ active: showLogin }\" \n              @click=\"showLogin = true\"\n            >登入</button>\n            <button \n              :class=\"{ active: !showLogin }\" \n              @click=\"showLogin = false\"\n            >註冊</button>\n          </div>\n          \n          <LoginForm \n            v-if=\"showLogin\" \n            @login=\"handleLogin\" \n            @login-error=\"showAlert\" \n          />\n          <RegisterForm \n            v-else \n            @register=\"handleRegister\" \n            @register-error=\"showAlert\" \n          />\n        </div>\n        \n        <div v-else class=\"comments-container\">\n          <CommentForm @comment-added=\"loadComments\" />\n          <CommentList \n            :comments=\"comments\" \n            :currentUserId=\"currentUser.id\" \n            @comment-action=\"handleCommentAction\" \n          />\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import NavBar from './components/UI/NavBar.vue'\n  import SystemAlert from './components/UI/Alert.vue'\n  import LoginForm from './components/Auth/LoginForm.vue'\n  import RegisterForm from './components/Auth/RegisterForm.vue'\n  import CommentForm from './components/Comment/CommentForm.vue'\n  import CommentList from './components/Comment/CommentList.vue'\n  import { login, register, logout } from './services/auth'\n  import { getComments, likeComment, replyComment, deleteComment } from './services/comment'\n  import { getStoredUser, clearUserData } from './utils/storage'\n  \n  export default {\n    name: 'App',\n    components: {\n      NavBar,\n      Alert,\n      LoginForm,\n      RegisterForm,\n      CommentForm,\n      CommentList\n    },\n    data() {\n      return {\n        showLogin: true,\n        currentUser: null,\n        comments: [],\n        alert: {\n          show: false,\n          message: '',\n          type: 'info'\n        }\n      }\n    },\n    computed: {\n      isLoggedIn() {\n        return this.currentUser !== null\n      }\n    },\n    created() {\n      // 檢查本地存儲是否有用戶信息\n      const storedUser = getStoredUser()\n      if (storedUser) {\n        this.currentUser = storedUser\n        this.loadComments()\n      }\n    },\n    methods: {\n      async handleLogin(credentials) {\n        try {\n          const user = await login(credentials)\n          this.currentUser = user\n          this.loadComments()\n          this.showAlert('登入成功', 'success')\n        } catch (error) {\n          console.error('Login error:', error)\n          this.showAlert(error.message || '登入失敗，請稍後再試', 'error')\n        }\n      },\n      async handleRegister(userData) {\n        try {\n          const user = await register(userData)\n          this.currentUser = user\n          this.showLogin = true\n          this.showAlert('註冊成功，已自動登入', 'success')\n          this.loadComments()\n        } catch (error) {\n          console.error('Register error:', error)\n          this.showAlert(error.message || '註冊失敗，請稍後再試', 'error')\n        }\n      },\n      async handleLogout() {\n        try {\n          await logout()\n          this.currentUser = null\n          this.comments = []\n          clearUserData()\n          this.showAlert('已成功登出', 'info')\n        } catch (error) {\n          console.error('Logout error:', error)\n        }\n      },\n      async loadComments() {\n        if (!this.isLoggedIn) return\n        \n        try {\n          this.comments = await getComments()\n        } catch (error) {\n          console.error('Error loading comments:', error)\n          this.showAlert('載入留言失敗', 'error')\n        }\n      },\n      async handleCommentAction(action, commentId, content) {\n        if (!this.isLoggedIn) return\n        \n        try {\n          switch (action) {\n            case 'like':\n              await likeComment(commentId)\n              break\n            case 'reply':\n              await replyComment(commentId, content)\n              break\n            case 'delete':\n              await deleteComment(commentId)\n              break\n            default:\n              console.warn('Unknown action:', action)\n              return\n          }\n          \n          // 刷新留言列表\n          this.loadComments()\n        } catch (error) {\n          console.error(`Error performing ${action}:`, error)\n          this.showAlert(`操作失敗: ${error.message || '發生未知錯誤'}`, 'error')\n        }\n      },\n      showAlert(message, type = 'info') {\n        this.alert = {\n          show: true,\n          message,\n          type\n        }\n        \n        // 3秒後自動關閉\n        setTimeout(() => {\n          this.clearAlert()\n        }, 3000)\n      },\n      clearAlert() {\n        this.alert.show = false\n      }\n    }\n  }\n  </script>\n  \n  <style>\n  body {\n    margin: 0;\n    font-family: Arial, sans-serif;\n    background-color: #f5f5f5;\n  }\n  \n  .app-container {\n    max-width: 900px;\n    margin: 0 auto;\n    padding: 20px;\n  }\n  \n  .content {\n    margin-top: 20px;\n  }\n  \n  .auth-container {\n    max-width: 400px;\n    margin: 30px auto;\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n    padding: 20px;\n  }\n  \n  .auth-toggle {\n    display: flex;\n    margin-bottom: 20px;\n    border-bottom: 1px solid #eee;\n  }\n  \n  .auth-toggle button {\n    flex: 1;\n    background: none;\n    border: none;\n    padding: 10px;\n    font-size: 16px;\n    cursor: pointer;\n    color: #333;\n  }\n  \n  .auth-toggle button.active {\n    font-weight: bold;\n    border-bottom: 2px solid #4CAF50;\n    color: #4CAF50;\n  }\n  \n  .comments-container {\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n    padding: 20px;\n  }\n  </style>"],"mappings":";;EACSA,KAAK,EAAC;AAAe;;EAOnBA,KAAK,EAAC;AAAS;;EAR1BC,GAAA;EAgBgCD,KAAK,EAAC;;;EACvBA,KAAK,EAAC;AAAa;;EAjBlCC,GAAA;EAwCoBD,KAAK,EAAC;;;;;;;;;uBAvCtBE,mBAAA,CAgDM,OAhDNC,UAgDM,GA/CJC,YAAA,CAIEC,iBAAA;IAHCC,UAAU,EAAEC,QAAA,CAAAD,UAAU;IACtBE,QAAQ,EAAEC,KAAA,CAAAC,WAAW,GAAGD,KAAA,CAAAC,WAAW,CAACF,QAAQ;IAC5CG,QAAM,EAAEJ,QAAA,CAAAK;mEAGXC,mBAAA,CAwCM,OAxCNC,UAwCM,GAtCIL,KAAA,CAAAM,KAAK,CAACC,IAAI,I,cADlBC,YAAA,CAKEC,gBAAA;IAdVjB,GAAA;IAWWkB,OAAO,EAAEV,KAAA,CAAAM,KAAK,CAACI,OAAO;IACtBC,IAAI,EAAEX,KAAA,CAAAM,KAAK,CAACK,IAAI;IAChBC,OAAK,EAAEd,QAAA,CAAAe;6DAblBC,mBAAA,gB,CAgBoBhB,QAAA,CAAAD,UAAU,I,cAAtBJ,mBAAA,CAsBM,OAtBNsB,UAsBM,GArBJX,mBAAA,CASM,OATNY,UASM,GARJZ,mBAAA,CAGY;IAFTb,KAAK,EAnBpB0B,eAAA;MAAAC,MAAA,EAmBgClB,KAAA,CAAAmB;IAAS;IAC1BC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEtB,KAAA,CAAAmB,SAAS;KAClB,IAAE,kBACHf,mBAAA,CAGY;IAFTb,KAAK,EAvBpB0B,eAAA;MAAAC,MAAA,GAuBiClB,KAAA,CAAAmB;IAAS;IAC3BC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEtB,KAAA,CAAAmB,SAAS;KAClB,IAAE,iB,GAIGnB,KAAA,CAAAmB,SAAS,I,cADjBX,YAAA,CAIEe,oBAAA;IAhCZ/B,GAAA;IA8BagC,OAAK,EAAE1B,QAAA,CAAA2B,WAAW;IAClBC,YAAW,EAAE5B,QAAA,CAAA6B;yEAEhBnB,YAAA,CAIEoB,uBAAA;IArCZpC,GAAA;IAmCaqC,UAAQ,EAAE/B,QAAA,CAAAgC,cAAc;IACxBC,eAAc,EAAEjC,QAAA,CAAA6B;kFAIrBlC,mBAAA,CAOM,OAPNuC,UAOM,GANJrC,YAAA,CAA6CsC,sBAAA;IAA/BC,cAAa,EAAEpC,QAAA,CAAAqC;EAAY,6CACzCxC,YAAA,CAIEyC,sBAAA;IAHCC,QAAQ,EAAErC,KAAA,CAAAqC,QAAQ;IAClBC,aAAa,EAAEtC,KAAA,CAAAC,WAAW,CAACsC,EAAE;IAC7BC,eAAc,EAAE1C,QAAA,CAAA2C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}