{"ast":null,"code":"import NavBar from './components/UI/NavBar.vue';\nimport SystemAlert from './components/UI/Alert.vue';\nimport LoginForm from './components/Auth/LoginForm.vue';\nimport RegisterForm from './components/Auth/RegisterForm.vue';\nimport CommentForm from './components/Comment/CommentForm.vue';\nimport CommentList from './components/Comment/CommentList.vue';\nimport { login, register, logout } from './services/auth';\nimport { getComments, likeComment, replyComment, deleteComment } from './services/comment';\nimport { getStoredUser, clearUserData } from './utils/storage';\nexport default {\n  name: 'App',\n  components: {\n    NavBar,\n    Alert,\n    LoginForm,\n    RegisterForm,\n    CommentForm,\n    CommentList\n  },\n  data() {\n    return {\n      showLogin: true,\n      currentUser: null,\n      comments: [],\n      alert: {\n        show: false,\n        message: '',\n        type: 'info'\n      }\n    };\n  },\n  computed: {\n    isLoggedIn() {\n      return this.currentUser !== null;\n    }\n  },\n  created() {\n    // 檢查本地存儲是否有用戶信息\n    const storedUser = getStoredUser();\n    if (storedUser) {\n      this.currentUser = storedUser;\n      this.loadComments();\n    }\n  },\n  methods: {\n    async handleLogin(credentials) {\n      try {\n        const user = await login(credentials);\n        this.currentUser = user;\n        this.loadComments();\n        this.showAlert('登入成功', 'success');\n      } catch (error) {\n        console.error('Login error:', error);\n        this.showAlert(error.message || '登入失敗，請稍後再試', 'error');\n      }\n    },\n    async handleRegister(userData) {\n      try {\n        const user = await register(userData);\n        this.currentUser = user;\n        this.showLogin = true;\n        this.showAlert('註冊成功，已自動登入', 'success');\n        this.loadComments();\n      } catch (error) {\n        console.error('Register error:', error);\n        this.showAlert(error.message || '註冊失敗，請稍後再試', 'error');\n      }\n    },\n    async handleLogout() {\n      try {\n        await logout();\n        this.currentUser = null;\n        this.comments = [];\n        clearUserData();\n        this.showAlert('已成功登出', 'info');\n      } catch (error) {\n        console.error('Logout error:', error);\n      }\n    },\n    async loadComments() {\n      if (!this.isLoggedIn) return;\n      try {\n        this.comments = await getComments();\n      } catch (error) {\n        console.error('Error loading comments:', error);\n        this.showAlert('載入留言失敗', 'error');\n      }\n    },\n    async handleCommentAction(action, commentId, content) {\n      if (!this.isLoggedIn) return;\n      try {\n        switch (action) {\n          case 'like':\n            await likeComment(commentId);\n            break;\n          case 'reply':\n            await replyComment(commentId, content);\n            break;\n          case 'delete':\n            await deleteComment(commentId);\n            break;\n          default:\n            console.warn('Unknown action:', action);\n            return;\n        }\n\n        // 刷新留言列表\n        this.loadComments();\n      } catch (error) {\n        console.error(`Error performing ${action}:`, error);\n        this.showAlert(`操作失敗: ${error.message || '發生未知錯誤'}`, 'error');\n      }\n    },\n    showAlert(message, type = 'info') {\n      this.alert = {\n        show: true,\n        message,\n        type\n      };\n\n      // 3秒後自動關閉\n      setTimeout(() => {\n        this.clearAlert();\n      }, 3000);\n    },\n    clearAlert() {\n      this.alert.show = false;\n    }\n  }\n};","map":{"version":3,"names":["NavBar","SystemAlert","LoginForm","RegisterForm","CommentForm","CommentList","login","register","logout","getComments","likeComment","replyComment","deleteComment","getStoredUser","clearUserData","name","components","Alert","data","showLogin","currentUser","comments","alert","show","message","type","computed","isLoggedIn","created","storedUser","loadComments","methods","handleLogin","credentials","user","showAlert","error","console","handleRegister","userData","handleLogout","handleCommentAction","action","commentId","content","warn","setTimeout","clearAlert"],"sources":["/Users/lidiannan/Documents/GitHub/comment-system/frontend/src/App.vue"],"sourcesContent":["<template>\n    <div class=\"app-container\">\n      <NavBar \n        :isLoggedIn=\"isLoggedIn\" \n        :username=\"currentUser ? currentUser.username : ''\" \n        @logout=\"handleLogout\" \n      />\n      \n      <div class=\"content\">\n        <Alert \n          v-if=\"alert.show\" \n          :message=\"alert.message\" \n          :type=\"alert.type\" \n          @close=\"clearAlert\" \n        />\n        \n        <div v-if=\"!isLoggedIn\" class=\"auth-container\">\n          <div class=\"auth-toggle\">\n            <button \n              :class=\"{ active: showLogin }\" \n              @click=\"showLogin = true\"\n            >登入</button>\n            <button \n              :class=\"{ active: !showLogin }\" \n              @click=\"showLogin = false\"\n            >註冊</button>\n          </div>\n          \n          <LoginForm \n            v-if=\"showLogin\" \n            @login=\"handleLogin\" \n            @login-error=\"showAlert\" \n          />\n          <RegisterForm \n            v-else \n            @register=\"handleRegister\" \n            @register-error=\"showAlert\" \n          />\n        </div>\n        \n        <div v-else class=\"comments-container\">\n          <CommentForm @comment-added=\"loadComments\" />\n          <CommentList \n            :comments=\"comments\" \n            :currentUserId=\"currentUser.id\" \n            @comment-action=\"handleCommentAction\" \n          />\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import NavBar from './components/UI/NavBar.vue'\n  import SystemAlert from './components/UI/Alert.vue'\n  import LoginForm from './components/Auth/LoginForm.vue'\n  import RegisterForm from './components/Auth/RegisterForm.vue'\n  import CommentForm from './components/Comment/CommentForm.vue'\n  import CommentList from './components/Comment/CommentList.vue'\n  import { login, register, logout } from './services/auth'\n  import { getComments, likeComment, replyComment, deleteComment } from './services/comment'\n  import { getStoredUser, clearUserData } from './utils/storage'\n  \n  export default {\n    name: 'App',\n    components: {\n      NavBar,\n      Alert,\n      LoginForm,\n      RegisterForm,\n      CommentForm,\n      CommentList\n    },\n    data() {\n      return {\n        showLogin: true,\n        currentUser: null,\n        comments: [],\n        alert: {\n          show: false,\n          message: '',\n          type: 'info'\n        }\n      }\n    },\n    computed: {\n      isLoggedIn() {\n        return this.currentUser !== null\n      }\n    },\n    created() {\n      // 檢查本地存儲是否有用戶信息\n      const storedUser = getStoredUser()\n      if (storedUser) {\n        this.currentUser = storedUser\n        this.loadComments()\n      }\n    },\n    methods: {\n      async handleLogin(credentials) {\n        try {\n          const user = await login(credentials)\n          this.currentUser = user\n          this.loadComments()\n          this.showAlert('登入成功', 'success')\n        } catch (error) {\n          console.error('Login error:', error)\n          this.showAlert(error.message || '登入失敗，請稍後再試', 'error')\n        }\n      },\n      async handleRegister(userData) {\n        try {\n          const user = await register(userData)\n          this.currentUser = user\n          this.showLogin = true\n          this.showAlert('註冊成功，已自動登入', 'success')\n          this.loadComments()\n        } catch (error) {\n          console.error('Register error:', error)\n          this.showAlert(error.message || '註冊失敗，請稍後再試', 'error')\n        }\n      },\n      async handleLogout() {\n        try {\n          await logout()\n          this.currentUser = null\n          this.comments = []\n          clearUserData()\n          this.showAlert('已成功登出', 'info')\n        } catch (error) {\n          console.error('Logout error:', error)\n        }\n      },\n      async loadComments() {\n        if (!this.isLoggedIn) return\n        \n        try {\n          this.comments = await getComments()\n        } catch (error) {\n          console.error('Error loading comments:', error)\n          this.showAlert('載入留言失敗', 'error')\n        }\n      },\n      async handleCommentAction(action, commentId, content) {\n        if (!this.isLoggedIn) return\n        \n        try {\n          switch (action) {\n            case 'like':\n              await likeComment(commentId)\n              break\n            case 'reply':\n              await replyComment(commentId, content)\n              break\n            case 'delete':\n              await deleteComment(commentId)\n              break\n            default:\n              console.warn('Unknown action:', action)\n              return\n          }\n          \n          // 刷新留言列表\n          this.loadComments()\n        } catch (error) {\n          console.error(`Error performing ${action}:`, error)\n          this.showAlert(`操作失敗: ${error.message || '發生未知錯誤'}`, 'error')\n        }\n      },\n      showAlert(message, type = 'info') {\n        this.alert = {\n          show: true,\n          message,\n          type\n        }\n        \n        // 3秒後自動關閉\n        setTimeout(() => {\n          this.clearAlert()\n        }, 3000)\n      },\n      clearAlert() {\n        this.alert.show = false\n      }\n    }\n  }\n  </script>\n  \n  <style>\n  body {\n    margin: 0;\n    font-family: Arial, sans-serif;\n    background-color: #f5f5f5;\n  }\n  \n  .app-container {\n    max-width: 900px;\n    margin: 0 auto;\n    padding: 20px;\n  }\n  \n  .content {\n    margin-top: 20px;\n  }\n  \n  .auth-container {\n    max-width: 400px;\n    margin: 30px auto;\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n    padding: 20px;\n  }\n  \n  .auth-toggle {\n    display: flex;\n    margin-bottom: 20px;\n    border-bottom: 1px solid #eee;\n  }\n  \n  .auth-toggle button {\n    flex: 1;\n    background: none;\n    border: none;\n    padding: 10px;\n    font-size: 16px;\n    cursor: pointer;\n    color: #333;\n  }\n  \n  .auth-toggle button.active {\n    font-weight: bold;\n    border-bottom: 2px solid #4CAF50;\n    color: #4CAF50;\n  }\n  \n  .comments-container {\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n    padding: 20px;\n  }\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}